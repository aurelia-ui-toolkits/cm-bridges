{"version":3,"sources":["src/app.js","src/contact-detail.js","src/contact-list.js","src/environment.js","src/main.js","src/messages.js","src/no-selection.js","src/utility.js","src/web-api.js","src/resources/index.js","C:/Users/danielb/Documents/Entwicklung/js/aurelia/cm-bridges/materialize/src/app.html","C:/Users/danielb/Documents/Entwicklung/js/aurelia/cm-bridges/materialize/src/styles.css","C:/Users/danielb/Documents/Entwicklung/js/aurelia/cm-bridges/materialize/src/contact-detail.html","C:/Users/danielb/Documents/Entwicklung/js/aurelia/cm-bridges/materialize/src/contact-list.html","C:/Users/danielb/Documents/Entwicklung/js/aurelia/cm-bridges/materialize/src/no-selection.html"],"names":["App","configureRouter","config","router","title","map","route","moduleId","name","ContactDetail","api","ea","activate","params","routeConfig","getContactDetails","id","then","contact","navModel","setTitle","firstName","originalContact","JSON","parse","stringify","publish","save","saveContact","canDeactivate","result","confirm","lastName","isRequesting","inject","ContactList","contacts","subscribe","select","msg","found","find","x","Object","assign","created","getContactList","selectedId","debug","testing","configure","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","b","useAll","start","setRoot","ContactUpdated","ContactViewed","NoSelection","message","areEqual","obj1","obj2","keys","every","key","hasOwnProperty","latency","getId","email","phoneNumber","WebAPI","setTimeout","results","resolve","filter","instance","index","indexOf","push"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n  configureRouter(config, router) {\n    config.title = 'Contacts';\n    config.map([\n      { route: '', moduleId: 'no-selection', title: 'Select' },\n      { route: 'contacts/:id', moduleId: 'contact-detail', name: 'contacts' }\n    ]);\n    this.router = router;\n  }\n}\n","/* eslint-disable no-alert */\n\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {ContactUpdated, ContactViewed} from './messages';\nimport {areEqual} from './utility';\n\nexport class ContactDetail {\n  static inject = [WebAPI, EventAggregator];\n\n  constructor(api, ea) {\n    this.api = api;\n    this.ea = ea;\n  }\n\n  activate(params, routeConfig) {\n    this.routeConfig = routeConfig;\n\n    return this.api.getContactDetails(params.id).then(contact => {\n      this.contact = contact;\n      this.routeConfig.navModel.setTitle(contact.firstName);\n      this.originalContact = JSON.parse(JSON.stringify(contact));\n      this.ea.publish(new ContactViewed(this.contact));\n    });\n  }\n\n  get canSave() {\n    return this.contact.firstName && this.contact.lastName && !this.api.isRequesting;\n  }\n\n  save() {\n    this.api.saveContact(this.contact).then(contact => {\n      this.contact = contact;\n      this.routeConfig.navModel.setTitle(contact.firstName);\n      this.originalContact = JSON.parse(JSON.stringify(contact));\n      this.ea.publish(new ContactUpdated(this.contact));\n    });\n  }\n\n  canDeactivate() {\n    if (!areEqual(this.originalContact, this.contact)) {\n      let result = confirm('You have unsaved changes. Are you sure you wish to leave?');\n\n      if (!result) {\n        this.ea.publish(new ContactViewed(this.contact));\n      }\n\n      return result;\n    }\n\n    return true;\n  }\n}\n\n/* eslint-enable no-alert */\n","import {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {ContactUpdated, ContactViewed} from './messages';\n\nexport class ContactList {\n  static inject = [WebAPI, EventAggregator];\n\n  constructor(api, ea) {\n    this.api = api;\n    this.contacts = [];\n\n    ea.subscribe(ContactViewed, msg => this.select(msg.contact));\n    ea.subscribe(ContactUpdated, msg => {\n      let id = msg.contact.id;\n      let found = this.contacts.find(x => x.id === id);\n      Object.assign(found, msg.contact);\n    });\n  }\n\n  created() {\n    this.api.getContactList().then(contacts => this.contacts = contacts);\n  }\n\n  select(contact) {\n    this.selectedId = contact.id;\n    return true;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.use.plugin('aurelia-materialize-bridge', b => b.useAll());\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class ContactUpdated {\n  constructor(contact) {\n    this.contact = contact;\n  }\n}\n\nexport class ContactViewed {\n  constructor(contact) {\n    this.contact = contact;\n  }\n}\n","export class NoSelection {\n  message = 'Please Select a Contact.';\n}\n","export function areEqual(obj1, obj2) {\n\treturn Object.keys(obj1).every((key) => obj2.hasOwnProperty(key) && (obj1[key] === obj2[key]));\n};","let latency = 200;\nlet id = 0;\n\nfunction getId(){\n  return ++id;\n}\n\nlet contacts = [\n  {\n    id:getId(),\n    firstName:'John',\n    lastName:'Tolkien',\n    email:'tolkien@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Clive',\n    lastName:'Lewis',\n    email:'lewis@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Owen',\n    lastName:'Barfield',\n    email:'barfield@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Charles',\n    lastName:'Williams',\n    email:'williams@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Roger',\n    lastName:'Green',\n    email:'green@inklings.com',\n    phoneNumber:'867-5309'\n  }\n];\n\nexport class WebAPI {\n  isRequesting = false;\n  \n  getContactList(){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let results = contacts.map(x =>  { return {\n          id:x.id,\n          firstName:x.firstName,\n          lastName:x.lastName,\n          email:x.email\n        }});\n        resolve(results);\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  getContactDetails(id){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let found = contacts.filter(x => x.id == id)[0];\n        resolve(JSON.parse(JSON.stringify(found)));\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  saveContact(contact){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let instance = JSON.parse(JSON.stringify(contact));\n        let found = contacts.filter(x => x.id == contact.id)[0];\n\n        if(found){\n          let index = contacts.indexOf(found);\n          contacts[index] = instance;\n        }else{\n          instance.id = getId();\n          contacts.push(instance);\n        }\n\n        this.isRequesting = false;\n        resolve(instance);\n      }, latency);\n    });\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n",null,null,null,null,null],"sourceRoot":"..\\src"}